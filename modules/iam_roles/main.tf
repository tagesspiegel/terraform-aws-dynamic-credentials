locals {
  name_suffix = "${var.tfc_organization_name}-${var.tfc_project_name}-${var.tfc_workspace_name}"
  full_name   = var.aws_iam_role_name_override != "" ? var.aws_iam_role_name_override : "${local.name_suffix}"
}

resource "aws_iam_role" "this" {
  name = "tfc-role-${local.full_name}"

  assume_role_policy = <<EOF
{
 "Version": "2012-10-17",
 "Statement": [
   {
     "Effect": "Allow",
     "Principal": {
       "Federated": "${var.tfc_oidc_provider_arn}"
     },
     "Action": "sts:AssumeRoleWithWebIdentity",
     "Condition": {
       "StringEquals": {
         "app.terraform.io:aud": "${one(var.tfc_oidc_provider_client_id_list)}"
       },
       "StringLike": {
         "app.terraform.io:sub": "organization:${var.tfc_organization_name}:project:${var.tfc_project_name}:workspace:${var.tfc_workspace_name}:run_phase:${var.tfc_run_phase}"
       }
     }
   }
 ]
}
EOF
}

resource "aws_iam_policy" "this" {
  name        = "tfc-policy-${local.full_name}"
  description = "Grants terraform cloud access to AWS (generated by terraform). This policy is attached to the role created by terraform. Do not modify this policy manually. If you need to modify the permissions, modify the terraform code and re-run terraform. Organization = ${var.tfc_organization_name} Project = ${var.tfc_project_name}"
  policy      = jsonencode({
    Version  = "2012-10-17"
    Statement = var.aws_iam_custom_policies
  })
}

resource "aws_iam_role_policy_attachment" "this" {
  role       = aws_iam_role.this.name
  policy_arn = aws_iam_policy.this.arn
}
